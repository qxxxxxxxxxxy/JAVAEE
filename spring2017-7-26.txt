Spring是一个开源框架，为了解决企业应用开发的复杂性而创建的

IOC 控制反转 控制权的转移，应用程序本身不负责以来对象的创建和维护，而是由外部容器负责创建和维护 
    DI(依赖注入)是其中的一种实现方式  本来需要你自己new对象，现在交给spring容器帮你new对象，权利从你手里反转到容器手里了



AOP  面向切面编程 Spring是一个容器 因为它包含并且管理应用对象的生命周期


package com.my.spring;

public class HelloWorld {
	public void setName(String name) {
		System.out.println("setName: " + name);
		this.name = name;
	}

	private String name;

	public void hello() {
		System.out.println("hello " + name);
	}
	public HelloWorld() {
		
	}
}

public static void main(String[] args) {
	//1.创建 Spring 的IOC容器对象
	ApplicationContext ctx = new ClassPathXmlApplicationContext("ApplicationContext.xml");
		
	//2.从IOC容器中获取 Bean实例
	HelloWorld helloWorld = (HelloWorld) ctx.getBean("helloWorld");
		
	//helloWorld.hello();

<bean id="helloWorld" class="com.my.spring.HelloWorld">
		<property name="name" value="qinxiaoyu Spring"></property>
</bean>

配置Bean 
  
  配置形式:基于 XML文件的方式:基于注解的方式 
  Bean的配置方式:通过全类名(反射)、通过工厂方法(静态工厂方法&实例工厂方法)、FactoryBean
  IOC容器BeanFactory&ApplicationContext 概述
  以来注入的方式:属性注入 构造器注入
  注入属性值细节
  自动转配
  Bean之间的关系:继承;依赖
  Bean的作用域:singleton;prototype;WEB 环境作用域
  使用外部属性文件
  spEL 
  IOC 容器中Bean的声明周期
  Spring 4.x新特性 泛型依赖注入

	<!-- 配置Bean class:bean 的全类名,通过反射的方式在IOC容器中创建Bean 所以要求Bean中必须有无参的构造器 id:标识类的类名 -->
	<!-- 通过注入的方式 -->
	<bean id="helloWorld" class="com.my.spring.HelloWorld">
		<property name="name" value="qinxiaoyu Spring"></property>
	</bean>
	<!-- 通过构造方法来配置bean的属性 -->
	<bean id="car" class="com.my.spring.Car">
		<constructor-arg value="Audi" type="java.lang.String"></constructor-arg>
		<constructor-arg>
			<!-- 如果字面包含特殊字符 可以使用<![CDATA[]] 包裹起来 -->
			<value><![CDATA[<ShangHai^>]]></value>
		</constructor-arg>
		<constructor-arg value="3000000"></constructor-arg>
	</bean>



	<bean id="person" class="com.my.spring.Person">
		<property name="name" value="Tom"></property>
		<property name="age" value="24"></property>
		<!-- 使用property的ref属性建立关系 外部引用 -->
		<!-- <property name="car" ref="car2"></property> -->
		<!-- 使用一个内部Bean -->
		<property name="car">
			<!-- 不能被外部引用 只能在内部使用 -->
			<bean class="com.my.spring.Car">
				<constructor-arg value="Ford"></constructor-arg>
				<constructor-arg value="Changan"></constructor-arg>
				<constructor-arg value="299999" type="double"></constructor-arg>
				<constructor-arg value="300" type="int"></constructor-arg>
			</bean>
		</property>
	</bean>
<bean id="person1" class="List.Person">
		<property name="name" value="qin"></property>
		<!-- 使用集合的形式赋值 -->
		<property name="cars">
			<list>
				<ref bean="car" />
				<ref bean="car2" />
				<!-- 也可以使用内部Bean定义 -->
			</list>
		</property>
		<property name="age" value="11"></property>

	</bean>
	<!-- 配置Map属性值 -->
	<bean id="person2" class="List.Person2">
		<property name="name" value="qinn"></property>
		<property name="cars">
			<map>
				<entry key="AA">
				<!-- 使用内部Bean方式 -->
					<bean class="com.my.spring.Car">
						<constructor-arg value="F123"></constructor-arg>
						<constructor-arg value="Changan"></constructor-arg>
						<constructor-arg value="2999999" type="double"></constructor-arg>
						<constructor-arg value="300" type="int"></constructor-arg>
					</bean>
				</entry>
				<!-- 使用直接引用的方式 -->
				<entry key="BB" value-ref="car2"></entry>
			</map>
		</property>
		<property name="age" value="18"></property>
	</bean>

	<!-- 配置Properties属性值 -->
	<bean id="dataSource" class="List.DataSource">
		<property name="properties">
			<props>
				<prop key="user">root</prop>
				<prop key="password">1234</prop>
				<prop key="jdbcUrl">jdbc:mysql://test</prop>
				<prop key="driverClass">com.mysql.jdbc.Drvier</prop>
			</props>
		</property>
	</bean>
	<!-- 配置独立的集合Bean，以供多个bean引用 -->
	<!-- 需要引用util 在Namespace里面 -->
	<util:list id="carss">
		<ref bean="car"/>
		<ref bean="car2"/>
	</util:list>
	<bean id="person4" class="List.Person">
		<property name="name" value="Jack"></property>
		<property name="age" value="29"></property>
		<property name="cars" ref="carss"></property>
	</bean>
	<!-- 通过 p 命名空间为bean的属性赋值,需要先导入p命名空间 -->
	<bean id="person5" class="List.Person" p:age="30" p:name="Queen" p:cars-ref="carss"></bean>